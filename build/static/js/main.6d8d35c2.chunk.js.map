{"version":3,"sources":["conf/config.js","helpers/useAuth.js","components/partials/SearchBar.js","components/partials/TrackList.js","components/partials/Player.js","components/partials/Lyrics.js","helpers/useLyrics.js","helpers/useGetParameters.js","components/Login.js","components/partials/LyricsPlaceholder.js","components/Dashboard.js","App.js","index.js"],"names":["config","API_URL","REDIRECT_URI","CLIENT_ID","cookies","Cookies","useAuth","code","authCookie","get","useState","accessToken","setAccessToken","refreshToken","setRefreshToken","expiresIn","setExpiresIn","useEffect","set","JSON","stringify","path","axios","post","then","res","data","window","history","pushState","catch","err","console","log","interval","setInterval","location","clearInterval","StyledSearchBar","styled","form","SearchBar","searchValue","searchValueHandler","type","placeholder","value","onChange","e","autoFocus","TracksList","div","SingleTrackContainer","AuthorImageContainer","AuthorDataContainer","TrackList","searchResults","trackHandler","map","singleTrack","onClick","src","thumbnail","url","alt","name","className","title","artist","uri","PlayerContainer","Player","trackToPlay","play","setPlay","style","pointerEvents","fontFamily","token","showSaveIcon","callback","state","isPlaying","uris","LyricsContainer","Lyrics","text","backgroundImage","background","getSongLyrics","song","a","useGetParameters","parameters","outputParams","param","push","join","Container","LoginLinkContainer","LoginLink","MainHeadline","h1","MainDescription","p","CopyRights","Login","props","AUTH_URL","client_id","response_type","redirect_uri","scope","href","xmlns","width","height","viewBox","d","PlaceholderContainer","LyricsPlaceholder","spotifyApi","SpotifyWebApi","clientId","Dashboard","codeParam","URLSearchParams","search","setSearchValue","setSearchResults","playingTrack","setPlayingTrack","songLyrics","setSongLyrics","isLoading","setIsLoading","cancelRequest","searchTracks","response","newSearchResults","body","tracks","items","thumbnails","album","images","sort","b","artists","length","handleTrack","track","lyrics","target","color","textAlign","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d8d35c2.chunk.js","sourcesContent":["const config = {\r\n  // API_URL: \"https://spotify-lyrics-web-app.herokuapp.com\",\r\n  // REDIRECT_URI: \"https://spotify-lyrics-web-app.herokuapp.com\",\r\n  API_URL: \"http://localhost:5000\",\r\n  REDIRECT_URI: \"http://localhost:5000\",\r\n  CLIENT_ID: \"e2f5bc73916845cca657f51299b431a6\",\r\n};\r\nexport default config;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"universal-cookie\";\r\nimport config from \"../conf/config\";\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst useAuth = (code) => {\r\n  const authCookie = cookies.get(\"s_l_auth\");\r\n  const [accessToken, setAccessToken] = useState(authCookie?.accessToken);\r\n  const [refreshToken, setRefreshToken] = useState(authCookie?.refreshToken);\r\n  const [expiresIn, setExpiresIn] = useState(authCookie?.expiresIn);\r\n\r\n  useEffect(() => {\r\n    cookies.set(\r\n      \"s_l_auth\",\r\n      JSON.stringify({\r\n        accessToken: accessToken,\r\n        refreshToken: refreshToken,\r\n        expiresIn: expiresIn,\r\n      }),\r\n      { path: \"/\" }\r\n    );\r\n  }, [accessToken, expiresIn, refreshToken]);\r\n\r\n  useEffect(() => {\r\n    if (!code) return null;\r\n    axios\r\n      .post(config.API_URL + \"/login\", {\r\n        code,\r\n      })\r\n      .then((res) => {\r\n        setAccessToken(res.data.accessToken);\r\n        setRefreshToken(res.data.refreshToken);\r\n        setExpiresIn(res.data.expiresIn);\r\n        window.history.pushState({}, null, \"/\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        // window.location.href = \"/\";\r\n      });\r\n  }, [code]);\r\n\r\n  useEffect(() => {\r\n    if (!refreshToken || !expiresIn) return;\r\n\r\n    const interval = setInterval(() => {\r\n      axios\r\n        .post(config.API_URL + \"/refresh\", {\r\n          refreshToken,\r\n        })\r\n        .then((res) => {\r\n          setAccessToken(res.data.accessToken);\r\n          setExpiresIn(res.data.expiresIn);\r\n        })\r\n        .catch(() => {\r\n          window.location = \"/\";\r\n        });\r\n    }, (expiresIn - 60) * 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [refreshToken, expiresIn]);\r\n\r\n  return accessToken;\r\n};\r\n\r\nexport default useAuth;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledSearchBar = styled.form`\r\n  background: #000;\r\n  min-height: 82px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0 1em;\r\n\r\n  & > input {\r\n    font-family: \"Noto Sans\", sans-serif;\r\n    max-width: 500px;\r\n    width: 100%;\r\n    height: 52px;\r\n    border-radius: 12px;\r\n    border: none;\r\n    padding: 0 20px;\r\n    font-size: 1.2em;\r\n  }\r\n`;\r\n\r\nconst SearchBar = ({ searchValue, searchValueHandler }) => {\r\n  return (\r\n    <StyledSearchBar key=\"searchBar\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"Search for Songs and Artists\"\r\n        value={searchValue}\r\n        onChange={(e) => searchValueHandler(e)}\r\n        autoFocus=\"autoFocus\"\r\n      />\r\n    </StyledSearchBar>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TracksList = styled.div`\r\n  background: #fff;\r\n  max-width: 500px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  overflow-y: scroll;\r\n  height: 400px;\r\n  position: absolute;\r\n  left: 50%;\r\n  transform: translate(-50%, 0);\r\n  font-family: \"Noto Sans\", sans-serif;\r\n  &::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n  &::-webkit-scrollbar-track {\r\n    background: #f1f1f1;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background: #888;\r\n  }\r\n  &::-webkit-scrollbar-thumb:hover {\r\n    background: #555;\r\n  }\r\n`;\r\nconst SingleTrackContainer = styled.div`\r\n  display: flex;\r\n  padding: 5px;\r\n  &:hover {\r\n    cursor: pointer;\r\n    background: grey;\r\n    transition-property: background;\r\n    transition-duration: 0.2s;\r\n    background: #00000015;\r\n  }\r\n`;\r\nconst AuthorImageContainer = styled.div`\r\n  width: 25%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  & > img {\r\n    width: 80px;\r\n  }\r\n`;\r\nconst AuthorDataContainer = styled.div`\r\n  width: 75%;\r\n  padding: 0 25px;\r\n  & > .song-title {\r\n    text-align: left;\r\n    font-size: 16px;\r\n  }\r\n  & > .song-author {\r\n    text-align: left;\r\n    font-family: 14px;\r\n  }\r\n`;\r\n\r\nconst TrackList = ({ searchResults, trackHandler }) => {\r\n  return (\r\n    <TracksList>\r\n      {searchResults.map((singleTrack) => {\r\n        return (\r\n          <SingleTrackContainer\r\n            key={singleTrack.uri}\r\n            onClick={() => trackHandler(singleTrack)}\r\n          >\r\n            <AuthorImageContainer>\r\n              <img\r\n                src={singleTrack.thumbnail.url}\r\n                alt={`${singleTrack.name} icon`}\r\n              />\r\n            </AuthorImageContainer>\r\n            <AuthorDataContainer>\r\n              <h3 className=\"song-title\">{singleTrack.title}</h3>\r\n              <p className=\"song-author\">{singleTrack.artist}</p>\r\n            </AuthorDataContainer>\r\n          </SingleTrackContainer>\r\n        );\r\n      })}\r\n    </TracksList>\r\n  );\r\n};\r\n\r\nexport default TrackList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport SpotifyPlayer from \"react-spotify-web-playback\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PlayerContainer = styled.div`\r\n  position: fixed;\r\n  bottom: 0;\r\n  width: 100%;\r\n  z-index: 9;\r\n`;\r\nconst Player = ({ accessToken, trackToPlay }) => {\r\n  const [play, setPlay] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setPlay(true);\r\n  }, [trackToPlay]);\r\n\r\n  return accessToken ? (\r\n    <PlayerContainer key={trackToPlay} style={{\r\n      pointerEvents: trackToPlay ? 'all' : 'none',\r\n      fontFamily: \"Noto Sans\"\r\n    }}>\r\n      <SpotifyPlayer\r\n        token={accessToken}\r\n        showSaveIcon\r\n        play={play}\r\n        callback={(state) => {\r\n          if (!state.isPlaying) setPlay(false);\r\n        }}\r\n        uris={trackToPlay ? [trackToPlay] : []}\r\n      />\r\n    </PlayerContainer>\r\n  ) : null;\r\n};\r\n\r\nexport default Player;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst LyricsContainer = styled.div`\r\n  height: calc(100vh - 130px);\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n\r\n  & > pre {\r\n    padding: 3em 2em 0;\r\n    white-space: pre-wrap;\r\n    max-width: 700px;\r\n    margin: 0 auto;\r\n    color: #fff;\r\n    font-size: 20px;\r\n    font-family: \"Noto Sans\", sans-serif;\r\n    text-align: center;\r\n    line-height: 1.8;\r\n    overflow-y: scroll;\r\n    height: calc(100vh - 250px);\r\n    text-shadow: 1px 1px 1px white;\r\n    overflow-x: hidden;\r\n    &::-webkit-scrollbar {\r\n      width: 10px;\r\n    }\r\n    &::-webkit-scrollbar-track {\r\n      background: #f1f1f122;\r\n    }\r\n    &::-webkit-scrollbar-thumb {\r\n      background: #888;\r\n    }\r\n    &::-webkit-scrollbar-thumb:hover {\r\n      background: #555;\r\n    }\r\n  }\r\n`;\r\nconst Lyrics = ({ text, backgroundImage }) => {\r\n  return (\r\n    <LyricsContainer\r\n      style={{\r\n        background: `linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)),url(${backgroundImage.url}) center`,\r\n      }}\r\n    >\r\n      <pre>{text}</pre>\r\n    </LyricsContainer>\r\n  );\r\n};\r\n\r\nexport default Lyrics;\r\n","import axios from \"axios\";\r\nimport config from \"../conf/config\";\r\n\r\nconst getSongLyrics = async (song) => {\r\n  const res = await axios.post(config.API_URL + \"/lyrics\", { song: song });\r\n  return await res.data.text;\r\n};\r\n\r\nexport default getSongLyrics;\r\n","const useGetParameters = (parameters) => {\r\n  let outputParams = [];\r\n  for (const param in parameters) {\r\n    outputParams.push(`${param}=${parameters[param]}`);\r\n  }\r\n  return \"?\" + outputParams.join(\"&\");\r\n};\r\n\r\nexport default useGetParameters;\r\n","import React from \"react\";\r\nimport useGetParameters from \"../helpers/useGetParameters\";\r\nimport styled from \"styled-components\";\r\nimport config from \"../conf/config\";\r\n\r\nconst Container = styled.div`\r\n  padding: 4em 2em;\r\n  @media (max-width: 768px) {\r\n    padding: 1em;\r\n  }\r\n`;\r\nconst LoginLinkContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst LoginLink = styled.a`\r\n  padding: 0.8em 1.3em;\r\n  font-size: 2em;\r\n  background: #1db954;\r\n  color: #fff;\r\n  border-radius: 10px;\r\n  transition-property: background, color;\r\n  transition: all 200ms ease;\r\n  cursor: pointer;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  margin: 1em auto;\r\n  font-family: \"Noto Sans\", sans-serif;\r\n  :hover {\r\n    background: #fff;\r\n    color: #1db954;\r\n    border: 2px solid #1db954;\r\n  }\r\n`;\r\n\r\nconst MainHeadline = styled.h1`\r\n  font-family: \"Noto Sans\", sans-serif;\r\n  width: 100%;\r\n  text-align: center;\r\n  font-size: 5em;\r\n  @media (max-width: 768px) {\r\n    font-size: 4em;\r\n  }\r\n`;\r\n\r\nconst MainDescription = styled.p`\r\n  font-family: \"Noto Sans\", sans-serif;\r\n  width: 100%;\r\n  text-align: center;\r\n  font-size: 1.5em;\r\n`;\r\n\r\nconst CopyRights = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 82px;\r\n  bottom: 0;\r\n  text-align: center;\r\n  font-family: \"consolas\";\r\n  font-family: 14px;\r\n  padding: 10px 0;\r\n  left: 0;\r\n\r\n  & > svg {\r\n    width: 20px;\r\n  }\r\n`;\r\n\r\nconst Login = (props) => {\r\n  const BASE_URL = \"https://accounts.spotify.com/authorize\";\r\n  const params = {\r\n    client_id: config.CLIENT_ID,\r\n    response_type: \"code\",\r\n    redirect_uri: config.REDIRECT_URI,\r\n    scope:\r\n      \"streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state\",\r\n  };\r\n  const AUTH_URL = BASE_URL + useGetParameters(params);\r\n\r\n  return (\r\n    <Container>\r\n      <MainHeadline>Spotify Lyrics</MainHeadline>\r\n      <MainDescription>\r\n        Listen to your favourite songs and follow the lyrics\r\n      </MainDescription>\r\n      <LoginLinkContainer>\r\n        <LoginLink href={AUTH_URL}>Login to Spotify</LoginLink>\r\n      </LoginLinkContainer>\r\n      <CopyRights>\r\n        <p>&copy; lukaskunicki </p>\r\n        <p>\r\n          <a href=\"https://github.com/lukaskunicki\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"24\"\r\n              height=\"24\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\" />\r\n            </svg>\r\n          </a>\r\n        </p>\r\n      </CopyRights>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Typing from \"react-typing-animation\";\r\n\r\nconst PlaceholderContainer = styled.div`\r\n  font-size: 32px;\r\n  font-family: \"Noto Sans\", sans-serif;\r\n  height: 82vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nconst LyricsPlaceholder = () => {\r\n  return (\r\n    <PlaceholderContainer>\r\n      <Typing>\r\n        <span>The lyrics will be presented here</span>\r\n      </Typing>\r\n    </PlaceholderContainer>\r\n  );\r\n};\r\n\r\nexport default LyricsPlaceholder;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport useAuth from \"../helpers/useAuth\";\r\nimport SearchBar from \"./partials/SearchBar\";\r\nimport TrackList from \"./partials/TrackList\";\r\nimport Player from \"./partials/Player\";\r\nimport Lyrics from \"./partials/Lyrics\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport getSongLyrics from \"../helpers/useLyrics\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport Login from \"../components/Login\";\r\nimport LyricsPlaceholder from \"./partials/LyricsPlaceholder\";\r\nimport config from \"../conf/config\";\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n  clientId: config.CLIENT_ID,\r\n});\r\n\r\nconst Dashboard = () => {\r\n  const codeParam = new URLSearchParams(window.location.search).get(\"code\");\r\n  const accessToken = useAuth(codeParam);\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [playingTrack, setPlayingTrack] = useState(null);\r\n  const [songLyrics, setSongLyrics] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    spotifyApi.setAccessToken(accessToken);\r\n  }, [accessToken]);\r\n\r\n  useEffect(() => {\r\n    if (!searchValue) return setSearchResults([]);\r\n    if (!accessToken) return;\r\n\r\n    let cancelRequest = false;\r\n    spotifyApi.searchTracks(searchValue).then((response) => {\r\n      if (cancelRequest) return;\r\n      const items = response.body.tracks.items;\r\n      const newSearchResults = items.map((singleTrack) => {\r\n        const thumbnails = singleTrack.album.images.sort(\r\n          (a, b) => a.height < b.height\r\n        );\r\n\r\n        return {\r\n          artist: singleTrack.artists[0].name,\r\n          title: singleTrack.name,\r\n          uri: singleTrack.uri,\r\n          backgroundImage: thumbnails[0],\r\n          thumbnail: thumbnails[thumbnails.length - 1],\r\n        };\r\n      });\r\n      setSearchResults(newSearchResults);\r\n    });\r\n    return () => (cancelRequest = true);\r\n  }, [searchValue, accessToken]);\r\n\r\n  const handleTrack = async (track) => {\r\n    setPlayingTrack(track);\r\n    setSongLyrics(\"\");\r\n    setSearchValue(\"\");\r\n    setSearchResults(\"\");\r\n    setIsLoading(true);\r\n    const lyrics = await getSongLyrics({\r\n      title: track.title,\r\n      artist: track.artist,\r\n    });\r\n    setSongLyrics(lyrics);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleSearchValue = (e) => setSearchValue(e.target.value);\r\n\r\n  if (!codeParam && !accessToken) return <Login />;\r\n  return (\r\n    <>\r\n      <SearchBar\r\n        searchValue={searchValue}\r\n        searchValueHandler={handleSearchValue}\r\n      />\r\n      {searchResults.length ? (\r\n        <TrackList searchResults={searchResults} trackHandler={handleTrack} />\r\n      ) : null}\r\n      <Player accessToken={accessToken} trackToPlay={playingTrack?.uri} />\r\n      {songLyrics ? (\r\n        <Lyrics\r\n          text={songLyrics}\r\n          backgroundImage={playingTrack?.backgroundImage}\r\n        />\r\n      ) : isLoading ? (\r\n        <Loader\r\n          type=\"ThreeDots\"\r\n          color=\"#1DB954\"\r\n          height={\"82vh\"}\r\n          style={{ textAlign: \"center\" }}\r\n        />\r\n      ) : (\r\n        <LyricsPlaceholder />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Dashboard;\r\n","import \"./App.css\";\nimport Dashboard from \"./components/Dashboard\";\n\nconst App = () => {\n  return (\n    <Dashboard /> \n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}